name: CI Pipeline - Build, Test & Docker

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    env:
      # Test environment variables (dummy values for CI)
      GROQ_API_KEY: "gsk_dummy_key_for_testing_only"
      OPENAI_API_KEY: "gsk_dummy_key_for_testing_only"
      OPENAI_API_BASE: "https://api.groq.com/openai/v1"
      OPENAI_MODEL_NAME: "llama-3.1-8b-instant"
      
      # LangSmith configuration (disabled for testing)
      LANGCHAIN_TRACING_V2: "false"
      LANGCHAIN_API_KEY: "dummy_langsmith_key"
      LANGCHAIN_PROJECT: "ats-resume-agent-ci"
      
      # Python configuration
      PYTHONPATH: ${{ github.workspace }}
      RUNNING_IN_DOCKER: "false"

    steps:
      - name: 📥 Check out repository code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock

      - name: 🔍 Verify installation
        run: |
          python --version
          pip list | grep -E "crewai|streamlit|langchain"
          
      - name: ✅ Run configuration checks
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')
          import config
          status = config.get_config_status()
          print('Configuration Status:', status)
          assert status['groq_configured'] == True, 'Groq not configured'
          print('✅ Configuration validated successfully')
          "

      - name: 🧪 Run pytest with coverage
        run: |
          pytest --verbose --cov=. --cov-report=term-missing --cov-report=xml
        continue-on-error: false

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  docker-build:
    name: Docker Build & Validate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Check out repository code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build Docker image
        run: |
          docker build -t ats-resume-agent:ci-${{ github.sha }} .
          
      - name: 🔍 Inspect Docker image
        run: |
          docker images | grep ats-resume-agent
          docker inspect ats-resume-agent:ci-${{ github.sha }}

      - name: ✅ Test Docker image (smoke test)
        run: |
          # Create temporary .env file for testing
          echo "GROQ_API_KEY=gsk_dummy_for_ci" > .env.test
          echo "LANGCHAIN_API_KEY=lsv2_dummy_for_ci" >> .env.test
          echo "LANGCHAIN_PROJECT=ats-ci-test" >> .env.test
          echo "LANGCHAIN_TRACING_V2=false" >> .env.test
          
          # Start container
          docker run -d \
            --name ats-test-container \
            -p 8501:8501 \
            --env-file .env.test \
            ats-resume-agent:ci-${{ github.sha }}
          
          # Wait for Streamlit to start
          echo "Waiting for Streamlit to start..."
          sleep 10
          
          # Check if container is running
          docker ps | grep ats-test-container
          
          # Check logs for successful startup
          docker logs ats-test-container
          
          # Verify Streamlit is responding
          curl -f http://localhost:8501/_stcore/health || exit 1
          
          echo "✅ Docker smoke test passed!"

      - name: 🧹 Cleanup Docker test
        if: always()
        run: |
          docker stop ats-test-container || true
          docker rm ats-test-container || true
          rm -f .env.test

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Check out repository code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 📦 Install linting tools
        run: |
          pip install flake8 black isort pylint

      - name: 🎨 Check code formatting with Black
        run: |
          black --check --diff . || echo "⚠️ Code formatting issues found"
        continue-on-error: true

      - name: 📐 Run Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true

      - name: 🔍 Check import sorting
        run: |
          isort --check-only --diff . || echo "⚠️ Import sorting issues found"
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Check out repository code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 🔒 Run security checks with Bandit
        run: |
          pip install bandit
          bandit -r . -ll || echo "⚠️ Security issues found"
        continue-on-error: true

      - name: 🔐 Check for secrets in code
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || echo "⚠️ Potential secrets detected"
        continue-on-error: true

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, docker-build, lint, security]
    if: always()
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🎉 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY